
module  hexexample( //PS2_Demo
	// Inputs
	CLOCK_50,
	KEY, LEDG, LEDR,

	// Bidirectionals
	PS2_CLK,
	PS2_DAT,
	
	GPIO_0,
	
	// Outputs
	HEX0,
	HEX1,
	HEX2,
	HEX3,
	HEX4,
	HEX5,
	HEX6,
	HEX7,
	
);

/*****************************************************************************
 *                           Parameter Declarations                          *
 *****************************************************************************/


/*****************************************************************************
 *                             Port Declarations                             *
 *****************************************************************************/

// Inputs
input				CLOCK_50;
input		[3:0]	KEY;

// Bidirectionals
inout				PS2_CLK;
inout				PS2_DAT;

output reg [7:0] LEDG;


// Outputs
output		[6:0]	HEX0;
output		[6:0]	HEX1;
output		[6:0]	HEX2;
output		[6:0]	HEX3;
output		[6:0]	HEX4;
output		[6:0]	HEX5;
output		[6:0]	HEX6;
output		[6:0]	HEX7;
output 	   reg[7:0] LEDR;
output reg [5:0]GPIO_0;
/*****************************************************************************
 *                 Internal Wires and Registers Declarations                 *
 *****************************************************************************/

// Internal Wires
wire		[7:0]	ps2_key_data;
wire				ps2_key_pressed;

// Internal Registers
reg			[7:0]	last_data_received;

integer  j =0;
reg [32:0]i;

parameter cw = 2'b01, ccw = 2'b10, stop = 2'b0;

// State Machine Registers

/*****************************************************************************
 *                         Finite State Machine(s)                           *
 *****************************************************************************/


/*****************************************************************************
 *                             Sequential Logic                              *
 *****************************************************************************/

always @(posedge CLOCK_50)
begin
	if (KEY[0] == 1'b0)
		last_data_received <= 8'h00;
	else if (ps2_key_pressed == 1'b1)
		begin 
			last_data_received <= ps2_key_data;
		end
		
end

always @ (posedge CLOCK_50)
begin
		i <= i + 1;
		if (i > 250000000)
		begin
			LEDR[4] <= 0; 
			LEDR[1] <= 0;
			LEDR[2] <= 0;
			LEDR[3] <= 0;
			GPIO_0[0] <= 0;//enable for motor 1
			GPIO_0[5] <= 0;//enable for motor 2
		end
		
		else if (i < 250000000) //16 and 8 zeroes
			begin 
				case(last_data_received)
					8'h2D:	//R
						begin
							if (i < 2500000000)//forward
								begin
									LEDR[1] <= 1; //turn on LEDR[0] for 10 second
									LEDR[0] <= 1;
									GPIO_0[0] <= 1;//enable for motor 1
									GPIO_0[2] <= 1;//for moving the motor 1 clockwise
									GPIO_0[4] <= 0;//for moving the motor 1 anti clockwise 
									GPIO_0[1] <= 0;//for moving the motor 2 anti clockwise
									GPIO_0[3] <= 1;//for moving the motor 2 clockwise
									GPIO_0[5] <= 1;//enable for motor 2
								end
						end
						/*
						8'h2D:	//S for starbucks -> go forward, then go left
						begin
							if (i < 500000000)//forward
								begin
									LEDR[1] <= 1; //turn on LEDR[0] for 10 second
									GPIO_0[0] <= 1;//enable for motor 1
									GPIO_0[2] <= 1;//for moving the motor 1 clockwise
									GPIO_0[4] <= 0;//for moving the motor 1 anti clockwise 
									GPIO_0[1] <= 0;//for moving the motor 2 anti clockwise
									GPIO_0[3] <= 1;//for moving the motor 2 clockwise
									GPIO_0[5] <= 1;//enable for motor 2
								end
								
							else if (i > 500000000 && i < 700000000) // left -> left motor must be turning cw
								begin
									LEDR[1] <= 0;
									GPIO_0[0] <= 1;//enable for motor 1
									GPIO_0[2] <= 1;//for moving the motor 1 clockwise
									GPIO_0[4] <= 0;//for moving the motor 1 anti clockwise 
									GPIO_0[1] <= 0;//for moving the motor 2 anti clockwise
									GPIO_0[3] <= 0;//for moving the motor 2 clockwise
									GPIO_0[5] <= 0;//enable for motor 2
								end
							
							else if (i > 700000000 && i < 1200000000) // on for 10 seconds
								begin
									LEDR[1] <= 0;
									LEDR[2] <= 1;
									GPIO_0[0] <= 1;//enable for motor 1
									GPIO_0[2] <= 1;//for moving the motor 1 clockwise
									GPIO_0[4] <= 0;//for moving the motor 1 anti clockwise 
									GPIO_0[1] <= 0;//for moving the motor 2 anti clockwise
									GPIO_0[3] <= 1;//for moving the motor 2 clockwise
									GPIO_0[5] <= 1;//enable for motor 2
								end
				
							else if (i > 1200000000 && i < 1400000000) //off for 4 seconds
								begin
									LEDR[1] <= 0;
									LEDR[2] <= 0;
									GPIO_0[0] <= 0;//enable for motor 1
									GPIO_0[2] <= 0;//for moving the motor 1 clockwise
									GPIO_0[4] <= 0;//for moving the motor 1 anti clockwise 
									GPIO_0[1] <= 0;//for moving the motor 2 anti clockwise
									GPIO_0[3] <= 1;//for moving the motor 2 clockwise
									GPIO_0[5] <= 1;//enable for motor 2
								end

							else if (i > 1400000000 && i < 1900000000)//on for 10
								begin
									LEDR[1] <= 0;
									LEDR[2] <= 0;
									LEDR[3] <= 1;
									GPIO_0[0] <= 1;//enable for motor 1
									GPIO_0[2] <= 1;//for moving the motor 1 clockwise
									GPIO_0[4] <= 0;//for moving the motor 1 anti clockwise 
									GPIO_0[1] <= 0;//for moving the motor 2 anti clockwise
									GPIO_0[3] <= 1;//for moving the motor 2 clockwise
									GPIO_0[5] <= 1;//enable for motor 2
								end
								
							else if (i > 1900000000 && i < 2100000000)//off for 4
								begin
									LEDR[1] <= 0;
									LEDR[2] <= 0;
									LEDR[3] <= 0;
									GPIO_0[0] <= 1;//enable for motor 1
									GPIO_0[2] <= 1;//for moving the motor 1 clockwise
									GPIO_0[4] <= 0;//for moving the motor 1 anti clockwise 
									GPIO_0[1] <= 0;//for moving the motor 2 anti clockwise
									GPIO_0[3] <= 0;//for moving the motor 2 clockwise
									GPIO_0[5] <= 0;//enable for motor 2
								end

							else if (i > 2100000000 && i < 2600000000)//on for 10
								begin
									LEDR[1] <= 0;
									LEDR[2] <= 0;
									LEDR[3] <= 0;
									LEDR[4] <= 1;
									GPIO_0[0] <= 1;//enable for motor 1
									GPIO_0[2] <= 1;//for moving the motor 1 clockwise
									GPIO_0[4] <= 0;//for moving the motor 1 anti clockwise 
									GPIO_0[1] <= 0;//for moving the motor 2 anti clockwise
									GPIO_0[3] <= 1;//for moving the motor 2 clockwise
									GPIO_0[5] <= 1;//enable for motor 2
								end
						end*/
				endcase
			end
end

/*****************************************************************************
 *                            Combinational Logic                            *
 *****************************************************************************/

assign HEX2 = 7'h7F;
assign HEX3 = 7'h7F;
assign HEX4 = 7'h7F;
assign HEX5 = 7'h7F;
assign HEX6 = 7'h7F;
assign HEX7 = 7'h7F;


/*****************************************************************************
 *                              Internal Modules                             *
 *****************************************************************************/

PS2_Controller PS2 (
	// Inputs
	.CLOCK_50				(CLOCK_50),
	.reset				(~KEY[0]),

	// Bidirectionals
	.PS2_CLK			(PS2_CLK),
 	.PS2_DAT			(PS2_DAT),

	// Outputs
	.received_data		(ps2_key_data),
	.received_data_en	(ps2_key_pressed)
);


//assign LEDR = last_data_received;
Hexadecimal_To_Seven_Segment Segment0 (
	// Inputs
	.hex_number			(last_data_received[3:0]),

	// Bidirectional

	// Outputs
	.seven_seg_display	(HEX0)
);

Hexadecimal_To_Seven_Segment Segment1 (
	// Inputs
	.hex_number			(last_data_received[7:4]),

	// Bidirectional

	// Outputs
	.seven_seg_display	(HEX1)
);


endmodule


