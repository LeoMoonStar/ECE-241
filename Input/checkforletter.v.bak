module checkforletter (

	CLOCK_50,
	KEY, LEDR, LEDG,

	// Bidirectionals
	PS2_CLK,
	PS2_DAT,
	
	
	
	// Outputs
	HEX0,
	HEX1,
	HEX2,
	HEX3,
	HEX4,
	HEX5,
	HEX6,
	HEX7,
);


/*****************************************************************************
 *                           Parameter Declarations                          *
 *****************************************************************************/


/*****************************************************************************
 *                             Port Declarations                             *
 *****************************************************************************/

// Inputs
input				CLOCK_50;
input		[0:0]	KEY;

// Bidirectionals
inout				PS2_CLK;
inout				PS2_DAT;
//wire [20:0]total;
//wire [20:0]total2;

// Outputs
output		[6:0]	HEX0;
output		[6:0]	HEX1;
output		[6:0]	HEX2;
output		[6:0]	HEX3;
output		[6:0]	HEX4;
output		[6:0]	HEX5;
output		[6:0]	HEX6;
output		[6:0]	HEX7;
output 	   [7:0] LEDR;
output reg    [3:0] LEDG;
//reg         store_command[31:0];
reg       	[32:0]counter1;
reg       	[32:0]counter2;
/*****************************************************************************
 *                 Internal Wires and Registers Declarations                 *
 *****************************************************************************/

// Internal Wires
wire		[7:0]	ps2_key_data;
wire				ps2_key_pressed;
wire		[7:0]	ps2_key_data1;
wire				ps2_key_pressed1;
wire		[7:0]	ps2_key_data2;
wire				ps2_key_pressed2;
wire		[7:0]	ps2_key_data3;
wire				ps2_key_pressed3;
//wire [7:0]num1 ,//num2;
integer j = 0;

// Internal Registers

reg		[7:0]hex_make_code_numbers_first;
wire     [7:0]store_hex_make_code_numbers_first;
reg		[7:0]hex_make_code_numbers_second;
wire     [7:0]store_hex_make_code_numbers_second;
reg      [7:0] hex_make_code_firstletter;
wire     [7:0]store_hex_make_code_firstletter;
reg      [7:0] hex_make_code_secondletter;
wire     [7:0]store_hex_make_code_secondletter;
wire     [7:0]store_the_number_first;
wire     [7:0]store_the_firstletter;
wire     [7:0]store_the_number_second;
wire     [7:0]store_the_secondletter;
wire     [2:0]result;
// State Machine Registers

/*****************************************************************************
 *                         Finite State Machine(s)                           *
 *****************************************************************************/


/*****************************************************************************
 *                             Sequential Logic                              *
 *****************************************************************************/
always @(posedge CLOCK_50)
begin
	if (KEY[0] == 1'b0)
		hex_make_code_firstletter <= 8'h00;
	else if (ps2_key_pressed == 1'b1)
		begin 
			hex_make_code_firstletter <= ps2_key_data;
		end
		
end
always @(posedge CLOCK_50)
begin
	if (KEY[0] == 1'b0)
		hex_make_code_numbers_first <= 8'h00;
	else if (ps2_key_pressed1 == 1'b1)
		begin 
			hex_make_code_numbers_first <= ps2_key_data1;
		end
		
end
/*
always @(posedge CLOCK_50)
begin
	if (KEY[0] == 1'b0)
		hex_make_code_numbers_second <= 8'h00;
	else if (ps2_key_pressed2 == 1'b1)
		begin 
			hex_make_code_numbers_second <= ps2_key_data2;
		end
		
end
*/
always @(posedge CLOCK_50)
begin
	if (KEY[0] == 1'b0)
		hex_make_code_secondletter <= 8'h00;
	else if (ps2_key_pressed3 == 1'b1)
		begin 
			hex_make_code_secondletter <= ps2_key_data3;
		end
		
end

assign store_hex_make_code_numbers_first = hex_make_code_numbers_first;
//assign store_hex_make_code_numbers_second = hex_make_code_numbers_second;
assign store_hex_make_code_firstletter = hex_make_code_firstletter;
assign store_hex_make_code_secondletter = hex_make_code_secondletter;
testforletters callforlettersfirst(store_hex_make_code_firstletter,store_the_firstletter);
testfornumbersfirst callfornumbers_first(store_hex_make_code_numbers_first,store_the_number_first);
//assign num1 = store_the_number_first;
//assign LEDR[7:4] = store_the_number_first;
//assign total = (num1*10);
//testfornumbersfirst callfornumbers_second(store_hex_make_code_numbers_second,store_the_number_second);
//assign num2 = store_the_number_second;
//assign LEDR[3:0] = num2;
//assign total2 = total + num2;
testforletters callforletterslast(store_hex_make_code_secondletter,store_the_secondletter);
//assign LEDR[3:0] = store_the_secondletter;
/*always @ (posedge CLOCK_50)
begin
	if(store_the_firstletter == 8'b1)
	j = j +1;
	end
*/
always @ (posedge CLOCK_50)
begin
	counter1 <= counter1 + 1;
		case (store_the_firstletter) //which direction?
			8'b100: //D
				begin
					if (counter1 > store_the_number_first*500000000)// && store_the_secondletter == 8'b100)//50,000,000 CC = 1 sec
						begin
						LEDG[1] <= 0;
						//counter1 <= 0;
						//j = j + 1;
						end
					else if(counter1 < store_the_number_first*5000000000)// && j ==0)
							LEDG[1] <= 1;
							
				  end	
		endcase
	end
/*	
always @ (posedge CLOCK_50)
begin
	counter2 <= counter2 + 1;
		case (store_the_number_first) //which direction?
		 8'b1: ///1
				begin
					if (counter1 >50000000)// && store_the_secondletter == 8'b100)//50,000,000 CC = 1 sec
						begin
						LEDG[1] <= 0;
						end
					else if(counter1 < 500000000 )
							LEDG[1] <= 1;
				  end	
			else if (hex_make_code == 8'h72 || hex_make_code == 8'h1E)
				 the_number <= 8'b10; //8'b10 2
			else if (hex_make_code == 8'h26 || hex_make_code == 8'h7A)
				the_number <= 8'b11; //8'b11 3
			else if (hex_make_code == 8'h25 || hex_make_code == 8'h6B)
				 the_number <= 8'b100;//8'b100 4
			else if (hex_make_code == 8'h2E || hex_make_code == 8'h73)
				 the_number <= 8'b101;//8'b101 5
			else if (hex_make_code == 8'h36 || hex_make_code == 8'h74)
				 the_number <= 8'b110;//8'b110 6
			else if (hex_make_code == 8'h3D || hex_make_code == 8'h6C)
				 the_number <= 8'b111;//8'b111 7
			else if (hex_make_code == 8'h3E || hex_make_code == 8'h75)
				 the_number <= 8'b1000;//8'b1000 8
			else if (hex_make_code == 8'h46 || hex_make_code == 8'h7D)
				 the_number <= 8'b1001;//8'b1001 9
			else
				 the_number <= 8'b0;//8'b0 0
			8'b001: //F
				begin
					if (counter2 >50000000)// && store_the_secondletter == 8'b100)//50,000,000 CC = 1 sec
						begin
						LEDG[1] <= 0;
						end
					else if(counter2 < 500000000 )
							LEDG[1] <= 1;
				  end	
		endcase
	end
	*/
PS2_Controller PS2 (
	// Inputs
	.CLOCK_50				(CLOCK_50),
	.reset				(~KEY[0]),

	// Bidirectionals
	.PS2_CLK			(PS2_CLK),
 	.PS2_DAT			(PS2_DAT),

	// Outputs
	.received_data		(ps2_key_data),
	.received_data_en	(ps2_key_pressed)
);
PS2_Controller PS21 (
	// Inputs
	.CLOCK_50				(CLOCK_50),
	.reset				(~KEY[0]),

	// Bidirectionals
	.PS2_CLK			(PS2_CLK),
 	.PS2_DAT			(PS2_DAT),

	// Outputs
	.received_data		(ps2_key_data1),
	.received_data_en	(ps2_key_pressed1)
);
/*PS2_Controller PS22 (
	// Inputs
	.CLOCK_50				(CLOCK_50),
	.reset				(~KEY[0]),

	// Bidirectionals
	.PS2_CLK			(PS2_CLK),
 	.PS2_DAT			(PS2_DAT),

	// Outputs
	.received_data		(ps2_key_data2),
	.received_data_en	(ps2_key_pressed2)
);*/
PS2_Controller PS23 (
	// Inputs
	.CLOCK_50				(CLOCK_50),
	.reset				(~KEY[0]),

	// Bidirectionals
	.PS2_CLK			(PS2_CLK),
 	.PS2_DAT			(PS2_DAT),

	// Outputs
	.received_data		(ps2_key_data3),
	.received_data_en	(ps2_key_pressed3)
);
Hexadecimal_To_Seven_Segment Segment0 (
	// Inputs
	.hex_number			(hex_make_code_firstletter[3:0]),

	// Bidirectional

	// Outputs
	.seven_seg_display	(HEX0)
);
Hexadecimal_To_Seven_Segment Segment1 (
	// Inputs
	.hex_number			(hex_make_code_numbers_first[3:0]),

	// Bidirectional

	// Outputs
	.seven_seg_display	(HEX2)
);/*
Hexadecimal_To_Seven_Segment Segment2 (
	// Inputs
	.hex_number			(hex_make_code_numbers_second[3:0]),

	// Bidirectional

	// Outputs
	.seven_seg_display	(HEX4)
);*/
Hexadecimal_To_Seven_Segment Segment3 (
	// Inputs
	.hex_number			(hex_make_code_secondletter[3:0]),

	// Bidirectional

	// Outputs
	.seven_seg_display	(HEX6)
);
Hexadecimal_To_Seven_Segment Segment4 (
	// Inputs
	.hex_number			(hex_make_code_firstletter[7:4]),

	// Bidirectional

	// Outputs
	.seven_seg_display	(HEX1)
);
Hexadecimal_To_Seven_Segment Segment5 (
	// Inputs
	.hex_number			(hex_make_code_numbers_first[7:4]),

	// Bidirectional

	// Outputs
	.seven_seg_display	(HEX3)
);/*
Hexadecimal_To_Seven_Segment Segment6 (
	// Inputs
	.hex_number			(hex_make_code_numbers_second[7:4]),

	// Bidirectional

	// Outputs
	.seven_seg_display	(HEX5)
);*/
Hexadecimal_To_Seven_Segment Segment7 (
	// Inputs
	.hex_number			(hex_make_code_secondletter[7:4]),

	// Bidirectional

	// Outputs
	.seven_seg_display	(HEX7)
);
	//assign hex_make_code = SW;
endmodule 