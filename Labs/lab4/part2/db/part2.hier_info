|part2
SW[0] => DATA_IN[0].IN1
SW[1] => DATA_IN[1].IN1
SW[2] => DATA_IN[2].IN1
SW[3] => DATA_IN[3].IN1
SW[4] => DATA_IN[4].IN1
SW[5] => DATA_IN[5].IN1
SW[6] => DATA_IN[6].IN1
SW[7] => DATA_IN[7].IN1
SW[8] => Rotate_R.IN8
SW[9] => Parallel_L.IN8
KEY[0] => clock.IN8


|part2|shift_reg_parallel:call1
right => right.IN1
left => left.IN1
load_left => load_left.IN1
D => D.IN1
load_n => load_n.IN1
clock => clock.IN1


|part2|shift_reg_parallel:call1|mux2to1:call1
x => m.IN0
y => m.IN0
s => m.IN1
s => m.IN1


|part2|shift_reg_parallel:call1|mux2to1:call2
x => m.IN0
y => m.IN0
s => m.IN1
s => m.IN1


|part2|shift_reg_parallel:call1|D_flip_flop:call
w => q.DATAIN
clk => q.CLK


|part2|shift_reg_parallel:call2
right => right.IN1
left => left.IN1
load_left => load_left.IN1
D => D.IN1
load_n => load_n.IN1
clock => clock.IN1


|part2|shift_reg_parallel:call2|mux2to1:call1
x => m.IN0
y => m.IN0
s => m.IN1
s => m.IN1


|part2|shift_reg_parallel:call2|mux2to1:call2
x => m.IN0
y => m.IN0
s => m.IN1
s => m.IN1


|part2|shift_reg_parallel:call2|D_flip_flop:call
w => q.DATAIN
clk => q.CLK


|part2|shift_reg_parallel:call3
right => right.IN1
left => left.IN1
load_left => load_left.IN1
D => D.IN1
load_n => load_n.IN1
clock => clock.IN1


|part2|shift_reg_parallel:call3|mux2to1:call1
x => m.IN0
y => m.IN0
s => m.IN1
s => m.IN1


|part2|shift_reg_parallel:call3|mux2to1:call2
x => m.IN0
y => m.IN0
s => m.IN1
s => m.IN1


|part2|shift_reg_parallel:call3|D_flip_flop:call
w => q.DATAIN
clk => q.CLK


|part2|shift_reg_parallel:call4
right => right.IN1
left => left.IN1
load_left => load_left.IN1
D => D.IN1
load_n => load_n.IN1
clock => clock.IN1


|part2|shift_reg_parallel:call4|mux2to1:call1
x => m.IN0
y => m.IN0
s => m.IN1
s => m.IN1


|part2|shift_reg_parallel:call4|mux2to1:call2
x => m.IN0
y => m.IN0
s => m.IN1
s => m.IN1


|part2|shift_reg_parallel:call4|D_flip_flop:call
w => q.DATAIN
clk => q.CLK


|part2|shift_reg_parallel:call5
right => right.IN1
left => left.IN1
load_left => load_left.IN1
D => D.IN1
load_n => load_n.IN1
clock => clock.IN1


|part2|shift_reg_parallel:call5|mux2to1:call1
x => m.IN0
y => m.IN0
s => m.IN1
s => m.IN1


|part2|shift_reg_parallel:call5|mux2to1:call2
x => m.IN0
y => m.IN0
s => m.IN1
s => m.IN1


|part2|shift_reg_parallel:call5|D_flip_flop:call
w => q.DATAIN
clk => q.CLK


|part2|shift_reg_parallel:call6
right => right.IN1
left => left.IN1
load_left => load_left.IN1
D => D.IN1
load_n => load_n.IN1
clock => clock.IN1


|part2|shift_reg_parallel:call6|mux2to1:call1
x => m.IN0
y => m.IN0
s => m.IN1
s => m.IN1


|part2|shift_reg_parallel:call6|mux2to1:call2
x => m.IN0
y => m.IN0
s => m.IN1
s => m.IN1


|part2|shift_reg_parallel:call6|D_flip_flop:call
w => q.DATAIN
clk => q.CLK


|part2|shift_reg_parallel:call7
right => right.IN1
left => left.IN1
load_left => load_left.IN1
D => D.IN1
load_n => load_n.IN1
clock => clock.IN1


|part2|shift_reg_parallel:call7|mux2to1:call1
x => m.IN0
y => m.IN0
s => m.IN1
s => m.IN1


|part2|shift_reg_parallel:call7|mux2to1:call2
x => m.IN0
y => m.IN0
s => m.IN1
s => m.IN1


|part2|shift_reg_parallel:call7|D_flip_flop:call
w => q.DATAIN
clk => q.CLK


|part2|shift_reg_parallel:call8
right => right.IN1
left => left.IN1
load_left => load_left.IN1
D => D.IN1
load_n => load_n.IN1
clock => clock.IN1


|part2|shift_reg_parallel:call8|mux2to1:call1
x => m.IN0
y => m.IN0
s => m.IN1
s => m.IN1


|part2|shift_reg_parallel:call8|mux2to1:call2
x => m.IN0
y => m.IN0
s => m.IN1
s => m.IN1


|part2|shift_reg_parallel:call8|D_flip_flop:call
w => q.DATAIN
clk => q.CLK


