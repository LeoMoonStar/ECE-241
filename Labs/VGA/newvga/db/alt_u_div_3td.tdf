--alt_u_div DEVICE_FAMILY="Cyclone II" LPM_PIPELINE=0 MAXIMIZE_SPEED=5 WIDTH_D=6 WIDTH_N=6 WIDTH_Q=6 WIDTH_R=6 denominator numerator quotient remainder
--VERSION_BEGIN 5.0 cbx_cycloneii 2004:12:20:14:28:52:SJ cbx_lpm_add_sub 2005:04:12:13:30:42:SJ cbx_lpm_divide 2005:03:14:22:01:08:SJ cbx_mgl 2005:05:19:13:51:58:SJ cbx_stratix 2005:06:02:09:53:04:SJ cbx_stratixii 2004:12:22:13:27:12:SJ cbx_util_mgl 2005:04:04:13:50:06:SJ  VERSION_END


--  Copyright (C) 1988-2005 Altera Corporation
--  Your use of Altera Corporation's design tools, logic functions 
--  and other software and tools, and its AMPP partner logic 
--  functions, and any output files any of the foregoing 
--  (including device programming or simulation files), and any 
--  associated documentation or information are expressly subject 
--  to the terms and conditions of the Altera Program License 
--  Subscription Agreement, Altera MegaCore Function License 
--  Agreement, or other applicable license agreement, including, 
--  without limitation, that your use is for the sole purpose of 
--  programming logic devices manufactured by Altera and sold by 
--  Altera or its authorized distributors.  Please refer to the 
--  applicable agreement for further details.


FUNCTION add_sub_6m8 (dataa[0..0], datab[0..0])
RETURNS ( cout, result[0..0]);
FUNCTION add_sub_7m8 (dataa[1..0], datab[1..0])
RETURNS ( cout, result[1..0]);
FUNCTION add_sub_8m8 (dataa[2..0], datab[2..0])
RETURNS ( cout, result[2..0]);
FUNCTION add_sub_9m8 (dataa[3..0], datab[3..0])
RETURNS ( cout, result[3..0]);
FUNCTION add_sub_am8 (dataa[4..0], datab[4..0])
RETURNS ( cout, result[4..0]);
FUNCTION add_sub_bm8 (dataa[5..0], datab[5..0])
RETURNS ( cout, result[5..0]);

--synthesis_resources = lut 6 
SUBDESIGN alt_u_div_3td
( 
	den_out[5..0]	:	output;
	denominator[5..0]	:	input;
	numerator[5..0]	:	input;
	quotient[5..0]	:	output;
	remainder[5..0]	:	output;
) 
VARIABLE 
	add_sub_0 : add_sub_6m8;
	add_sub_1 : add_sub_7m8;
	add_sub_2 : add_sub_8m8;
	add_sub_3 : add_sub_9m8;
	add_sub_4 : add_sub_am8;
	add_sub_5 : add_sub_bm8;
	DenominatorIn[48..0]	: WIRE;
	DenominatorIn_tmp[48..0]	: WIRE;
	gnd_wire	: WIRE;
	nose[41..0]	: WIRE;
	NumeratorIn[41..0]	: WIRE;
	NumeratorIn_tmp[41..0]	: WIRE;
	prestg[35..0]	: WIRE;
	quotient_tmp[5..0]	: WIRE;
	sel[41..0]	: WIRE;
	selnose[41..0]	: WIRE;
	StageIn[41..0]	: WIRE;
	StageIn_tmp[41..0]	: WIRE;
	StageOut[35..0]	: WIRE;

BEGIN 
	add_sub_0.dataa[0..0] = NumeratorIn[5..5];
	add_sub_0.datab[0..0] = DenominatorIn[0..0];
	add_sub_1.dataa[] = ( StageIn[6..6], NumeratorIn[10..10]);
	add_sub_1.datab[1..0] = DenominatorIn[8..7];
	add_sub_2.dataa[] = ( StageIn[13..12], NumeratorIn[15..15]);
	add_sub_2.datab[2..0] = DenominatorIn[16..14];
	add_sub_3.dataa[] = ( StageIn[20..18], NumeratorIn[20..20]);
	add_sub_3.datab[3..0] = DenominatorIn[24..21];
	add_sub_4.dataa[] = ( StageIn[27..24], NumeratorIn[25..25]);
	add_sub_4.datab[4..0] = DenominatorIn[32..28];
	add_sub_5.dataa[] = ( StageIn[34..30], NumeratorIn[30..30]);
	add_sub_5.datab[5..0] = DenominatorIn[40..35];
	den_out[5..0] = DenominatorIn[40..35];
	DenominatorIn[] = (gnd_wire # DenominatorIn_tmp[]);
	DenominatorIn_tmp[] = ( DenominatorIn[41..0], ( gnd_wire, denominator[]));
	gnd_wire = B"0";
	nose[] = ( B"000000", (add_sub_5.cout # gnd_wire), B"000000", (add_sub_4.cout # gnd_wire), B"000000", (add_sub_3.cout # gnd_wire), B"000000", (add_sub_2.cout # gnd_wire), B"000000", (add_sub_1.cout # gnd_wire), B"000000", (add_sub_0.cout # gnd_wire));
	NumeratorIn[] = (gnd_wire # NumeratorIn_tmp[]);
	NumeratorIn_tmp[] = ( NumeratorIn[35..0], numerator[]);
	prestg[] = ( add_sub_5.result[], GND, add_sub_4.result[], B"00", add_sub_3.result[], B"000", add_sub_2.result[], B"0000", add_sub_1.result[], B"00000", add_sub_0.result[]);
	quotient[] = quotient_tmp[];
	quotient_tmp[] = ( (! selnose[0..0]), (! selnose[7..7]), (! selnose[14..14]), (! selnose[21..21]), (! selnose[28..28]), (! selnose[35..35]));
	remainder[5..0] = StageIn[41..36];
	sel[] = ( gnd_wire, (gnd_wire # (sel[41..41] # DenominatorIn[47..47])), (gnd_wire # (sel[40..40] # DenominatorIn[46..46])), (gnd_wire # (sel[39..39] # DenominatorIn[45..45])), (gnd_wire # (sel[38..38] # DenominatorIn[44..44])), (gnd_wire # (sel[37..37] # DenominatorIn[43..43])), gnd_wire, (gnd_wire # (sel[35..35] # DenominatorIn[40..40])), (gnd_wire # (sel[34..34] # DenominatorIn[39..39])), (gnd_wire # (sel[33..33] # DenominatorIn[38..38])), (gnd_wire # (sel[32..32] # DenominatorIn[37..37])), (gnd_wire # (sel[31..31] # DenominatorIn[36..36])), gnd_wire, (gnd_wire # (sel[29..29] # DenominatorIn[33..33])), (gnd_wire # (sel[28..28] # DenominatorIn[32..32])), (gnd_wire # (sel[27..27] # DenominatorIn[31..31])), (gnd_wire # (sel[26..26] # DenominatorIn[30..30])), (gnd_wire # (sel[25..25] # DenominatorIn[29..29])), gnd_wire, (gnd_wire # (sel[23..23] # DenominatorIn[26..26])), (gnd_wire # (sel[22..22] # DenominatorIn[25..25])), (gnd_wire # (sel[21..21] # DenominatorIn[24..24])), (gnd_wire # (sel[20..20] # DenominatorIn[23..23])), (gnd_wire # (sel[19..19] # DenominatorIn[22..22])), gnd_wire, (gnd_wire # (sel[17..17] # DenominatorIn[19..19])), (gnd_wire # (sel[16..16] # DenominatorIn[18..18])), (gnd_wire # (sel[15..15] # DenominatorIn[17..17])), (gnd_wire # (sel[14..14] # DenominatorIn[16..16])), (gnd_wire # (sel[13..13] # DenominatorIn[15..15])), gnd_wire, (gnd_wire # (sel[11..11] # DenominatorIn[12..12])), (gnd_wire # (sel[10..10] # DenominatorIn[11..11])), (gnd_wire # (sel[9..9] # DenominatorIn[10..10])), (gnd_wire # (sel[8..8] # DenominatorIn[9..9])), (gnd_wire # (sel[7..7] # DenominatorIn[8..8])), gnd_wire, (gnd_wire # (sel[5..5] # DenominatorIn[5..5])), (gnd_wire # (sel[4..4] # DenominatorIn[4..4])), (gnd_wire # (sel[3..3] # DenominatorIn[3..3])), (gnd_wire # (sel[2..2] # DenominatorIn[2..2])), (gnd_wire # (sel[1..1] # DenominatorIn[1..1])));
	selnose[] = ( ((gnd_wire # (! nose[41..41])) # sel[41..41]), ((gnd_wire # (! nose[40..40])) # sel[40..40]), ((gnd_wire # (! nose[39..39])) # sel[39..39]), ((gnd_wire # (! nose[38..38])) # sel[38..38]), ((gnd_wire # (! nose[37..37])) # sel[37..37]), ((gnd_wire # (! nose[36..36])) # sel[36..36]), ((gnd_wire # (! nose[35..35])) # sel[35..35]), ((gnd_wire # (! nose[34..34])) # sel[34..34]), ((gnd_wire # (! nose[33..33])) # sel[33..33]), ((gnd_wire # (! nose[32..32])) # sel[32..32]), ((gnd_wire # (! nose[31..31])) # sel[31..31]), ((gnd_wire # (! nose[30..30])) # sel[30..30]), ((gnd_wire # (! nose[29..29])) # sel[29..29]), ((gnd_wire # (! nose[28..28])) # sel[28..28]), ((gnd_wire # (! nose[27..27])) # sel[27..27]), ((gnd_wire # (! nose[26..26])) # sel[26..26]), ((gnd_wire # (! nose[25..25])) # sel[25..25]), ((gnd_wire # (! nose[24..24])) # sel[24..24]), ((gnd_wire # (! nose[23..23])) # sel[23..23]), ((gnd_wire # (! nose[22..22])) # sel[22..22]), ((gnd_wire # (! nose[21..21])) # sel[21..21]), ((gnd_wire # (! nose[20..20])) # sel[20..20]), ((gnd_wire # (! nose[19..19])) # sel[19..19]), ((gnd_wire # (! nose[18..18])) # sel[18..18]), ((gnd_wire # (! nose[17..17])) # sel[17..17]), ((gnd_wire # (! nose[16..16])) # sel[16..16]), ((gnd_wire # (! nose[15..15])) # sel[15..15]), ((gnd_wire # (! nose[14..14])) # sel[14..14]), ((gnd_wire # (! nose[13..13])) # sel[13..13]), ((gnd_wire # (! nose[12..12])) # sel[12..12]), ((gnd_wire # (! nose[11..11])) # sel[11..11]), ((gnd_wire # (! nose[10..10])) # sel[10..10]), ((gnd_wire # (! nose[9..9])) # sel[9..9]), ((gnd_wire # (! nose[8..8])) # sel[8..8]), ((gnd_wire # (! nose[7..7])) # sel[7..7]), ((gnd_wire # (! nose[6..6])) # sel[6..6]), ((gnd_wire # (! nose[5..5])) # sel[5..5]), ((gnd_wire # (! nose[4..4])) # sel[4..4]), ((gnd_wire # (! nose[3..3])) # sel[3..3]), ((gnd_wire # (! nose[2..2])) # sel[2..2]), ((gnd_wire # (! nose[1..1])) # sel[1..1]), ((gnd_wire # (! nose[0..0])) # sel[0..0]));
	StageIn[] = (gnd_wire # StageIn_tmp[]);
	StageIn_tmp[] = ( StageOut[35..0], B"000000");
	StageOut[] = ( ((( StageIn[34..30], NumeratorIn[30..30]) & selnose[35..35]) # (prestg[35..30] & (! selnose[35..35]))), ((( StageIn[28..24], NumeratorIn[25..25]) & selnose[28..28]) # (prestg[29..24] & (! selnose[28..28]))), ((( StageIn[22..18], NumeratorIn[20..20]) & selnose[21..21]) # (prestg[23..18] & (! selnose[21..21]))), ((( StageIn[16..12], NumeratorIn[15..15]) & selnose[14..14]) # (prestg[17..12] & (! selnose[14..14]))), ((( StageIn[10..6], NumeratorIn[10..10]) & selnose[7..7]) # (prestg[11..6] & (! selnose[7..7]))), ((( StageIn[4..0], NumeratorIn[5..5]) & selnose[0..0]) # (prestg[5..0] & (! selnose[0..0]))));
END;
--VALID FILE
